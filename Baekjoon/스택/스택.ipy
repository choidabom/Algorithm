{
 "cells": [
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 스택의 개념\n",
    "한 쪽 끝에서만 자료를 넣고 뺄 수 있는 LIFO(Last In First Out) 형식의 자료구조\n",
    "![image.png](attachment:image.png)\n",
    "\n",
    "(파이썬은 스택 자료구조를 제공하지 않다. 기본 클래스인 list를 통해 스택을 흉내 낼 수 있다.)\n",
    "\n",
    "#### 스택의 연산\n",
    "*스택 -> LIFO(Last In First Out)*\n",
    "\n",
    "즉, 가장 최근에 스택에 추가한 항목이 가장 먼저 제거될 항목이다.\n",
    "\n",
    "- push(item): item 하나를 스택의 가장 윗 부분에 추가한다.\n",
    "- pop(): 스택 가장 위에 있는 원소를 삭제하고 그 원소를 반환한다.\n",
    "- peek(): 스택 가장 위에 있는 원소를 반환한다. (삭제하지는 않는다.)\n",
    "- isEmpty(): 스택이 비어있다면 1, 아니면 0을 반환한다.\n",
    "\n",
    "#### 스택의 사용 사례\n",
    "- 재귀 알고리즘\n",
    "    - 재귀적으로 함수를 호출해야 하는 경우에 임시 데이터를 스택에 넣어준다.\n",
    "    - 재귀함수를 빠져 나와 퇴각 검색(backtrack)을 할 때는 스택에 넣어 두었던 임시 데이터를 빼줘야 한다.\n",
    "    - 스택은 이런 일련의 행위를 직관적으로 가능하게 해 준다.\n",
    "    - 또한 스택은 재귀 알고리즘을 반복적 형태(iterative)를 통해서 구현할 수 있게 해준다.\n",
    "- 웹 브라우저 방문기록(뒤로가기)\n",
    "- 실행 취소(undo)\n",
    "- 역순 문자열 만들기\n",
    "- 수식의 괄호 검사(연산자 우선순위 표현을 위한 괄호 검사)\n",
    "- 후위 표기법 계산\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# init\n",
    "stack = [] # 빈 스택(리스트) 초기화\n",
    "stack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 예시를 위한 스택!\n",
    "stack = [7, 8, 9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# push(item): item 하나를 스택의 가장 윗 부분에 추가한다.\n",
    "# push, 스택에 원소를 넣을 때 append 메서드 이용해 리스트의 가장 마지막에 넣도록 함.\n",
    "stack.append(int(input()))\n",
    "stack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pop(): 스택에서 가장 위에 있는 항목을 제거한다.\n",
    "# pop()은 리스트의 맨 마지막 요소를 돌려주고 그 요소는 삭제함.\n",
    "# pop(x)는 리스트의 x번째 요소를 돌려주고 그 요소는 삭제함.\n",
    "\n",
    "stack.pop()\n",
    "stack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# peek(): 스택의 가장 위에 있는 항목을 반환한다.\n",
    "peek = stack[-1]\n",
    "peek"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 스택\n",
    "\n",
    "정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.\n",
    "\n",
    "명령은 총 다섯 가지이다.\n",
    "\n",
    "**push X**: 정수 X를 스택에 넣는 연산이다.\n",
    "\n",
    "**pop**: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.\n",
    "\n",
    "**size**: 스택에 들어있는 정수의 개수를 출력한다.\n",
    "\n",
    "**empty**: 스택이 비어있으면 1, 아니면 0을 출력한다.\n",
    "\n",
    "**top**: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.\n",
    "\n",
    "#### 입력\n",
    "첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.\n",
    "\n",
    "#### 출력\n",
    "출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sys 모듈은 파이썬 인터프리터가 제공하는 변수와 함수를 직접 제어할 수 있게 해주는 모듈\n",
    "# 시간 초과를 해결하기 위한 sys 선언\n",
    "import sys\n",
    "\n",
    "# 첫째 줄에 명령의 수 N이 주어짐\n",
    "N = int(sys.stdin.readline()) \n",
    "\n",
    "# 파이썬은 스택 자료구조를 제공하지 않는다. python은 list로 stack을 흉내 낼 수 있음.\n",
    "stack = [] \n",
    "\n",
    "# 0부터 N-1까지 반복\n",
    "for _ in range(N):\n",
    "    # 임의의 개수의 정수를 한 줄에 입력받아 리스트에 저장할 때\n",
    "    command = list(sys.stdin.readline().rstrip().split())\n",
    "        # split(): 문자열을 나눠주는 함수\n",
    "        # map(): 반복 가능한 객체에 대해 각각의 요소들을 지정된 함수로 처리해주는 함수\n",
    "        # list(): 자료형을 리스트형으로 변환해주는 함수\n",
    "        \n",
    "    \n",
    "    if command[0] == 'push':\n",
    "        stack.append(command[1])\n",
    "        \n",
    "    elif command[0] == 'pop':\n",
    "        if len(stack) != 0:\n",
    "            stack.pop()\n",
    "        else:\n",
    "            print(-1)\n",
    "    \n",
    "    elif command[0] == 'size':\n",
    "        print(len(stack))\n",
    "        \n",
    "    elif command[0] == 'empty':\n",
    "        if len(stack) == 0:\n",
    "            print(1)\n",
    "        else:\n",
    "            print(0)\n",
    "            \n",
    "    elif command[0] == 'top':\n",
    "        if len(stack) == 0:\n",
    "            print(-1)\n",
    "        else:\n",
    "            print(stack[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "N = int(sys.stdin.readline()) # 첫째 줄에 명령의 수 N이 주어짐\n",
    "\n",
    "stack = [] \n",
    "#파이썬은 스택 자료구조를 제공하지 않는다. 기본 클래스인 list를 통해 스택을 흉내낼 수 있다.\n",
    "\n",
    "for _ in range(N):\n",
    "    command = sys.stdin.readline().split()\n",
    "    # split(): 문자열을 나눠주는 함수\n",
    "    \n",
    "    '''\n",
    "    # 임의의 개수의 정수를 한 줄에 입력받아 리스트에 저장할 때\n",
    "    command = list(map(sys.stdin.readline().split()))\n",
    "        # split(): 문자열을 나눠주는 함수\n",
    "        # map(): 반복 가능한 객체에 대해 각각의 요소들을 지정된 함수로 처리해주는 함수\n",
    "        # list(): 자료형을 리스트형으로 변환해주는 함수\n",
    "        \n",
    "    -> 이걸로 했을 때는 왜 런타임에러(TypeError)가 뜨는가???!\n",
    "    ''' \n",
    "    \n",
    "    if command[0] == 'push':\n",
    "        stack.append(command[1])\n",
    "        \n",
    "    elif command[0] == 'pop':\n",
    "        stack.pop()\n",
    "    \n",
    "    elif command[0] == 'size':\n",
    "        print(len(stack))\n",
    "        \n",
    "    elif command[0] == 'empty':\n",
    "        if len(stack) == 0:\n",
    "            print(1)\n",
    "        else:\n",
    "            print(0)\n",
    "            \n",
    "    elif command[0] == 'top':\n",
    "        if len(stack) == 0:\n",
    "            print(-1)\n",
    "        else:\n",
    "            print(stack[-1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "\n",
    "# 정수 X를 스택에 넣는 연산이다.\n",
    "def push(x):\n",
    "    stack.append(x)\n",
    "\n",
    "# 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. \n",
    "# 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.\n",
    "def pop():\n",
    "    if(not stack):\n",
    "        return -1\n",
    "    else:\n",
    "        return stack.pop()\n",
    "\n",
    "# 스택에 들어있는 정수의 개수를 출력한다.\n",
    "def size():\n",
    "    return len(stack)\n",
    "\n",
    "# 스택이 비어있으면 1, 아니면 0을 출력한다.\n",
    "def empty():\n",
    "    return 0 if stack else 1\n",
    "\n",
    "# 스택의 가장 위에 있는 정수를 출력한다. \n",
    "# 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.\n",
    "def top():\n",
    "    return stack[-1] if stack else -1\n",
    "\n",
    "N = float(sys.stdin.readline().rstrip())\n",
    "stack = []\n",
    "\n",
    "for _ in range(N):\n",
    "    input_split = sys.stdin.readline().rstrip().split()\n",
    "\n",
    "    order = input_split[0]\n",
    "\n",
    "    if order == \"push\":\n",
    "        push(input_split[1])\n",
    "    elif order == \"pop\":\n",
    "        print(pop())\n",
    "    elif order == \"size\":\n",
    "        print(size())\n",
    "    elif order == \"empty\":\n",
    "        print(empty())\n",
    "    elif order == \"top\":\n",
    "        print(top())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "input = sys.stdin.readline()\n",
    "n = int(input()) \n",
    "\n",
    "stack = []    \n",
    "\n",
    "class Stack:\n",
    "    \n",
    "    def push(x): \n",
    "    stack.append(x)\n",
    "    \n",
    "    def pop():  \n",
    "        if not stack:\n",
    "            return -1\n",
    "        return stack.pop()\n",
    "\n",
    "    def size():\n",
    "        return len(stack)\n",
    "\n",
    "    def empty():\n",
    "        if not stack:\n",
    "            return 1\n",
    "        return 0\n",
    "\n",
    "    def top():\n",
    "        if not stack:\n",
    "            return -1\n",
    "        return stack[-1]\n",
    "\n",
    "\n",
    "for _ in range(n):\n",
    "    command = sys.stdin.readline().split()\n",
    "    \n",
    "    if 'push' in command:\n",
    "        push(command[1])\n",
    "        \n",
    "    elif 'top' in command:\n",
    "        print(top())\n",
    "        \n",
    "    elif 'size' in command:\n",
    "        print(size())\n",
    "            \n",
    "    elif 'empty' in command:\n",
    "        print(empty())\n",
    "        \n",
    "    else:\n",
    "        print(pop())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Stack:\n",
    "    # 리스트를 이용한 스택 구현\n",
    "    def __init__(self):\n",
    "        self.top = []\n",
    "        \n",
    "    # 스택 크기 반환\n",
    "    def __len__(self) -> bool:\n",
    "        return len(self.top)\n",
    "    \n",
    "    # 스택에 원소 삽입\n",
    "    def push(self, item):\n",
    "        self.top.append(item)\n",
    "        \n",
    "    # 스택 가장 위에 있는 원소를 삭제하고 반환\n",
    "    # 리스트 인덱스는 0부터 시작, 뒤에서부터 위치를 지정하는 경우는 -1부터 시작!\n",
    "    def pop(self, item):\n",
    "        if not self.isEmpty():\n",
    "            return self.top.pop(-1)\n",
    "        else:\n",
    "            print(\"Stack underlow\")\n",
    "            exit()\n",
    "            \n",
    "    # 스택 가장 위에 있는 원소를 반환\n",
    "    def peek(self, item):\n",
    "        if not self.isEmpty():\n",
    "            return self.top[-1]\n",
    "        else:\n",
    "            print(\"underflow\")\n",
    "            exit()\n",
    "            \n",
    "    # 스택이 비어있는지를 bool값으로 반환\n",
    "    def isEmpty(self) -> bool:\n",
    "        return len(self.top) == 0"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
